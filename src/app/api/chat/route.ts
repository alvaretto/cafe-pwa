import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import Anthropic from '@anthropic-ai/sdk'
import { GoogleGenerativeAI } from '@google/generative-ai'
import {
  MOCK_PRODUCTS,
  MOCK_CUSTOMERS,
  MOCK_SALES,
  MOCK_EXPENSES,
  MOCK_SUPPLIERS,
  MOCK_INVENTORY_MOVEMENTS,
  getExpensesStats,
  getSalesStats
} from '@/lib/mock-data'

// Configuraci√≥n de autenticaci√≥n simplificada para la API
const authOptions = {
  secret: process.env.NEXTAUTH_SECRET,
}

// Las configuraciones de API se inicializar√°n dentro de la funci√≥n para asegurar acceso a variables de entorno

interface ChatMessage {
  role: 'user' | 'assistant'
  content: string
}

function generateDemoResponse(message: string, userRole: string): string {
  const lowerMessage = message.toLowerCase()

  // Respuestas espec√≠ficas por rol
  if (userRole === 'ADMIN') {
    if (lowerMessage.includes('margen') || lowerMessage.includes('ganancia')) {
      return `**An√°lisis de M√°rgenes - Modo Demo**

üìä **Caf√© Ar√°bica Premium:**
- Costo: $8,500/kg
- Precio venta: $12,000/kg
- Margen bruto: 29.2%

üìà **Tendencia este mes:**
- Ventas: +15% vs mes anterior
- Margen promedio: 28.5%

*Nota: Esta es una respuesta de demostraci√≥n. Para an√°lisis reales, configura tu API key de Gemini.*`
    }

    if (lowerMessage.includes('puc') || lowerMessage.includes('contable') || lowerMessage.includes('bolsa')) {
      return `**Clasificaci√≥n Contable PUC 2025 - Modo Demo**

üè∑Ô∏è **Bolsas de empaque para caf√©:**
- **Cuenta:** 1405 - Inventario de Materias Primas
- **Subcuenta:** 140505 - Materiales de Empaque
- **Justificaci√≥n:** Se incorporan f√≠sicamente al producto final

üìã **Tratamiento contable:**
1. **Compra:** D√©bito 1405, Cr√©dito 2205 (Proveedores)
2. **Uso:** Se incluye en costo de ventas al momento de la venta
3. **No es gasto** operacional, es parte del inventario

*Respuesta basada en PUC 2025 Colombia - Modo Demo*`
    }

    if (lowerMessage.includes('gasto') || lowerMessage.includes('expense')) {
      return `**An√°lisis de Gastos - Modo Demo**

üí∞ **Gastos este mes:**
- Total: $2,450,000
- Vs mes anterior: +8.5%

üìä **Por categor√≠a:**
- Servicios p√∫blicos: $850,000 (35%)
- Arriendo: $600,000 (24%)
- Publicidad: $400,000 (16%)
- Otros: $600,000 (25%)

‚ö†Ô∏è **Alertas:** Servicios p√∫blicos aumentaron 12% este mes.

*Datos de demostraci√≥n - Configura Gemini AI para an√°lisis reales*`
    }
  } else {
    // Respuestas para VENDEDOR
    if (lowerMessage.includes('producto') || lowerMessage.includes('disponible')) {
      return `**Productos Disponibles - Modo Demo**

‚òï **Stock actual:**
- Caf√© Ar√°bica Premium: 2,500g
- Caf√© Especial Tinto del Mirador: 1,800g
- Caf√© Molido Tradicional: 3,200g
- Caf√© en Grano Org√°nico: 1,200g

üí∞ **Precios por gramo:**
- Ar√°bica Premium: $12/g
- Especial Tinto: $10/g
- Molido Tradicional: $8/g
- Grano Org√°nico: $15/g

‚úÖ Todos los productos est√°n disponibles para venta inmediata.

*Informaci√≥n de demostraci√≥n*`
    }

    if (lowerMessage.includes('cliente') || lowerMessage.includes('compra')) {
      return `**An√°lisis de Clientes - Modo Demo**

üë• **Clientes activos:**
- Total registrados: 156 clientes
- Compras √∫ltimos 30 d√≠as: 89 clientes

üìâ **Clientes inactivos (>30 d√≠as):**
- Mar√≠a Gonz√°lez - √öltima compra: 45 d√≠as
- Carlos Rodr√≠guez - √öltima compra: 38 d√≠as
- Ana Mart√≠nez - √öltima compra: 52 d√≠as

üí° **Sugerencia:** Contactar clientes inactivos con promoci√≥n especial.

*Datos de demostraci√≥n*`
    }

    if (lowerMessage.includes('precio')) {
      return `**Lista de Precios - Modo Demo**

‚òï **Precios actuales:**
- Caf√© Especial Tinto del Mirador: $10/g
- Media libra (227g): $2,270
- Una libra (454g): $4,540

üìä **Comparativa:**
- Competencia promedio: $11/g
- Nuestro precio: $10/g (9% m√°s competitivo)

‚ú® **Promociones activas:**
- 2x1 en medias libras los viernes
- Descuento 10% por compras >$50,000

*Precios de demostraci√≥n*`
    }
  }

  // Respuesta gen√©rica
  return `**Asistente IA - Modo Demo**

Hola, soy tu asistente inteligente del CRM Tinto del Mirador.

${userRole === 'ADMIN'
  ? 'üîß **Modo Administrador:** Puedo ayudarte con an√°lisis financieros, clasificaci√≥n contable PUC 2025, gesti√≥n de gastos y reportes avanzados.'
  : 'üõí **Modo Vendedor:** Puedo ayudarte con informaci√≥n de productos, clientes, precios e inventario disponible.'
}

**Tu consulta:** "${message}"

Para obtener respuestas m√°s precisas y an√°lisis detallados basados en tus datos reales, configura tu API key de Google Gemini AI.

**Ejemplos de consultas:**
${userRole === 'ADMIN'
  ? '- "¬øCu√°l es el margen del Caf√© Ar√°bica?"\n- "¬øC√≥mo clasifico las bolsas seg√∫n PUC 2025?"\n- "¬øCu√°les son los gastos m√°s altos?"'
  : '- "¬øQu√© productos est√°n disponibles?"\n- "¬øCu√°l es el precio del caf√© especial?"\n- "¬øQu√© clientes no han comprado √∫ltimamente?"'
}

*Respuesta generada en modo demostraci√≥n*`
}

function getSystemContext(userRole: string) {
  const baseContext = `
Eres un asistente inteligente especializado en el CRM "Tinto del Mirador", un sistema para negocios de venta de caf√©.

INFORMACI√ìN DEL NEGOCIO:
- Negocio: Venta de caf√© por libras, medias libras y gramos
- Sistema: CRM completo con m√≥dulos de ventas, inventario, clientes, gastos y reportes
- Contabilidad: Implementa PUC 2025 Colombia para clasificaci√≥n contable

DATOS ACTUALES DEL SISTEMA:
- Productos: ${MOCK_PRODUCTS.length} productos de caf√© disponibles
- Clientes: ${MOCK_CUSTOMERS.length} clientes registrados  
- Ventas: ${MOCK_SALES.length} ventas registradas
- Proveedores: ${MOCK_SUPPLIERS.length} proveedores activos
- Movimientos de inventario: ${MOCK_INVENTORY_MOVEMENTS.length} movimientos

PRODUCTOS DISPONIBLES:
${MOCK_PRODUCTS.map(p => `- ${p.name}: Stock ${p.stock}g, Precio/g: $${p.pricePerGram}`).join('\n')}

CLIENTES PRINCIPALES:
${MOCK_CUSTOMERS.slice(0, 5).map(c => `- ${c.nombres} ${c.apellidos}: ${c.totalPurchases} compras, $${c.totalSpent.toLocaleString()}`).join('\n')}
`

  if (userRole === 'ADMIN') {
    // Datos simplificados para demo
    const totalExpenses = MOCK_EXPENSES.reduce((sum, exp) => sum + exp.amount, 0)
    const totalSales = MOCK_SALES.reduce((sum, sale) => sum + sale.total, 0)

    return baseContext + `

ROL: ADMINISTRADOR - Acceso completo a todos los datos

DATOS FINANCIEROS (DEMO):
- Gastos registrados: $${totalExpenses.toLocaleString()}
- Ventas registradas: $${totalSales.toLocaleString()}
- Productos en inventario: ${MOCK_PRODUCTS.length} tipos diferentes

GASTOS PRINCIPALES:
- Servicios p√∫blicos, arriendo, publicidad, materias primas

CONOCIMIENTO CONTABLE PUC 2025:
- Materiales de empaque (bolsas, etiquetas): Cuenta 1405 - Inventario de Materias Primas
- Caf√© verde: Cuenta 1405 - Inventario de Materias Primas  
- Caf√© procesado: Cuenta 1430 - Productos Terminados
- Gastos administrativos: Grupo 51
- Gastos de ventas: Grupo 52

Puedes responder consultas sobre:
‚úÖ An√°lisis financiero completo
‚úÖ Configuraci√≥n del sistema
‚úÖ Clasificaci√≥n contable PUC 2025
‚úÖ M√°rgenes y rentabilidad
‚úÖ Gesti√≥n de usuarios
‚úÖ Reportes avanzados
‚úÖ Todos los m√≥dulos del sistema`
  } else {
    return baseContext + `

ROL: VENDEDOR - Acceso limitado a datos de ventas y productos

RESTRICCIONES:
‚ùå Sin acceso a datos financieros sensibles (gastos, m√°rgenes detallados)
‚ùå Sin acceso a configuraci√≥n del sistema
‚ùå Sin informaci√≥n sobre costos de productos

Puedes responder consultas sobre:
‚úÖ Productos disponibles y precios de venta
‚úÖ Stock e inventario disponible
‚úÖ Informaci√≥n de clientes y historial de compras
‚úÖ Registro de ventas
‚úÖ Sugerencias de atenci√≥n al cliente
‚úÖ Recomendaciones de productos`
  }
}

export async function POST(request: NextRequest) {
  try {
    // Inicializar clientes de IA dentro de la funci√≥n
    // Cargar configuraci√≥n local si existe (solo en desarrollo)
    try {
      if (process.env.NODE_ENV === 'development') {
        require('../../../local-config')
      }
    } catch (e) {
      // Archivo de configuraci√≥n local no existe, usar variables de entorno
    }

    // Usar la API key de Anthropic Claude desde variables de entorno
    const finalAnthropicKey = process.env.ANTHROPIC_API_KEY

    const anthropic = finalAnthropicKey && finalAnthropicKey.includes('sk-ant-')
      ? new Anthropic({
          apiKey: finalAnthropicKey,
        })
      : null

    const genAI = process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY !== 'tu-gemini-api-key-aqui'
      ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
      : null

    // Simplificar autenticaci√≥n para demo - en producci√≥n usar getServerSession
    const { message, userRole, conversationHistory } = await request.json()

    if (!message || typeof message !== 'string') {
      return NextResponse.json({ error: 'Mensaje requerido' }, { status: 400 })
    }

    // Validar rol
    if (!userRole || !['ADMIN', 'VENDEDOR'].includes(userRole)) {
      return NextResponse.json({ error: 'Rol inv√°lido' }, { status: 400 })
    }

    // Validaciones adicionales para vendedores
    if (userRole === 'VENDEDOR') {
      const restrictedKeywords = [
        'gasto', 'costo', 'margen', 'ganancia', 'configuraci√≥n', 
        'usuario', 'admin', 'contrase√±a', 'financiero', 'rentabilidad'
      ]
      
      const hasRestrictedContent = restrictedKeywords.some(keyword => 
        message.toLowerCase().includes(keyword)
      )
      
      if (hasRestrictedContent) {
        return NextResponse.json({
          response: "Lo siento, como vendedor no tengo acceso a informaci√≥n financiera sensible o de configuraci√≥n del sistema. Puedo ayudarte con consultas sobre productos, clientes, inventario y ventas. ¬øEn qu√© m√°s puedo asistirte?"
        })
      }
    }

    // Intentar usar Anthropic Claude primero
    if (anthropic) {
      try {
        const systemContext = getSystemContext(userRole)

        // Construir el historial de conversaci√≥n para contexto
        const conversationContext = conversationHistory
          ?.slice(-3) // √öltimos 3 mensajes
          ?.map((msg: ChatMessage) => `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`)
          ?.join('\n') || ''

        const systemPrompt = `${systemContext}

${conversationContext ? `CONTEXTO DE CONVERSACI√ìN PREVIA:\n${conversationContext}\n` : ''}

INSTRUCCIONES:
- Responde de manera profesional y √∫til
- Usa los datos reales del sistema cuando sea relevante
- Para consultas contables, referencia el PUC 2025
- Mant√©n las restricciones de rol (${userRole})
- Usa formato markdown para mejor legibilidad
- Si no tienes informaci√≥n espec√≠fica, sugiere alternativas
- S√© conciso pero completo en tus respuestas
- Responde siempre en espa√±ol`

        const claudeResponse = await anthropic.messages.create({
          model: 'claude-3-haiku-20240307',
          max_tokens: 1000,
          temperature: 0.7,
          system: systemPrompt,
          messages: [
            {
              role: 'user',
              content: message
            }
          ]
        })

        const firstContent = claudeResponse.content?.[0]
        const responseText = firstContent && firstContent.type === 'text'
          ? firstContent.text
          : 'Error procesando respuesta de Claude'

        return NextResponse.json({ response: responseText })
      } catch (claudeError) {
        console.error('Error con Claude API, intentando Gemini:', claudeError)

        // Si falla Claude, intentar con Gemini como respaldo
        if (genAI) {
          try {
            const model = genAI.getGenerativeModel({ model: 'gemini-pro' })
            const systemContext = getSystemContext(userRole)

            const conversationContext = conversationHistory
              ?.slice(-3)
              ?.map((msg: ChatMessage) => `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`)
              ?.join('\n') || ''

            const prompt = `${systemContext}

${conversationContext ? `CONTEXTO DE CONVERSACI√ìN PREVIA:\n${conversationContext}\n` : ''}

CONSULTA ACTUAL: ${message}

INSTRUCCIONES:
- Responde de manera profesional y √∫til
- Usa los datos reales del sistema cuando sea relevante
- Para consultas contables, referencia el PUC 2025
- Mant√©n las restricciones de rol (${userRole})
- Usa formato markdown para mejor legibilidad
- Si no tienes informaci√≥n espec√≠fica, sugiere alternativas
- S√© conciso pero completo en tus respuestas

Respuesta:`

            const result = await model.generateContent(prompt)
            const response = result.response
            const text = response.text()

            return NextResponse.json({ response: text + '\n\n*üîÑ Respuesta generada con Gemini AI (respaldo)*' })
          } catch (geminiError) {
            console.error('Error con ambas APIs, usando respuesta de demostraci√≥n:', geminiError)
          }
        }
      }
    }

    // Si no hay APIs disponibles, devolver error
    return NextResponse.json({
      response: '‚ùå **Error de configuraci√≥n**\n\nNo se pudo conectar con los servicios de IA. Verifique la configuraci√≥n de las API keys de Anthropic Claude o Google Gemini.',
      error: 'API_NOT_CONFIGURED'
    }, { status: 500 })

  } catch (error) {
    console.error('Error en chat API:', error)
    return NextResponse.json(
      { error: 'Error interno del servidor' }, 
      { status: 500 }
    )
  }
}
